jobs:
  pr_comment:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        BRANCH_NAME: ${{ github.event.workflow_run.head_branch }}
        EVENT_TYPE: ${{ github.event.workflow_run.event}}
        PR_OWNER: ${{ github.event.workflow_run.head_repository.owner.login }}
        PR_SHA: ${{ github.event.workflow_run.head_sha }}
        PULL_REQUESTS: ${{ toJSON(github.event.workflow_run.pull_requests) }}
        REPO_ID: ${{ github.event.repository.id }}
        RUN_ID: ${{ github.event.workflow_run.id }}
      uses: actions/github-script@v7
      with:
        script: "async function updatePR(owner, repo, issue_number, purpose, body)\
          \ {\n  const { data } = await github.rest.issues.get({ owner, repo, issue_number\
          \ });\n  core.debug(JSON.stringify(data, null, 2));\n\n  const marker =\
          \ `<!-- bot: ${purpose} -->`;\n\n  let new_body = data.body ? data.body.trim().split(marker)[0].trim()\
          \ : \"\";\n  new_body += `\\n${marker}\\n---\\n${body}`;\n\n  core.info(`Updating\
          \ the text body of PR #${issue_number} in ${owner}/${repo}`);\n  await github.rest.issues.update({\
          \ owner, repo, issue_number, body: new_body });\n}\n\nconst { owner, repo\
          \ } = context.repo;\nconst run_id = `${process.env.RUN_ID}`;\nconst repo_id\
          \ = `${process.env.REPO_ID}`;\n\nlet pulls = [];\nconst event_type = `${process.env.EVENT_TYPE}`;\n\
          if (event_type === \"push\") { // if push, it's from the same repo which\
          \ means `pull_requests` is populated\n  pulls = JSON.parse(`${process.env.PULL_REQUESTS}`);\n\
          } else {\n  const pr_branch = `${process.env.BRANCH_NAME}`;\n  const pr_sha\
          \ = `${process.env.PR_SHA}`;\n  const pr_owner = `${process.env.PR_OWNER}`;\n\
          \  const { data } = await github.rest.pulls.list({ owner, repo, head: `${pr_owner}:${pr_branch}`,\
          \ state: \"open\" });\n  core.debug(JSON.stringify(data, null, 2));\n  pulls\
          \ = data.filter((pr) => pr.head.sha === pr_sha && pr.labels.find((l) =>\
          \ l.name === \"build-pr-jar\"));\n}\n\nif (!pulls.length) {\n  return core.notice(\"\
          This workflow doesn't have any pull requests!\");\n} else if (pulls.length\
          \ > 1) {\n  core.info(JSON.stringify(pulls, null, 2));\n  return core.error(\"\
          Found multiple matching PRs\");\n}\nconst pull_request = pulls[0];\n\nconst\
          \ artifacts = await github.paginate(github.rest.actions.listWorkflowRunArtifacts,\
          \ { owner, repo, run_id });\nif (!artifacts.length) {\n  return core.info(\"\
          Skipping comment due to no artifact found\");\n}\nconst artifact = artifacts.find((art)\
          \ => art.name === `paper-${pull_request.number}`);\nif (!artifact) {\n \
          \ return core.info(\"Skipping comment to no matching artifact found\");\n\
          }\n\nconst link = `https://nightly.link/${owner}/${repo}/actions/artifacts/${artifact.id}.zip`;\n\
          const body = `Download the paperclip jar for this pull request: [${artifact.name}.zip](${link})`;\n\
          core.info(`Adding a link to ${link}`);\nawait updatePR(owner, repo, pull_request.number,\
          \ \"paperclip-pr-build\", body);\n"
name: Comment on pull request
on:
  repository_dispatch:
    types: trigger-ga___pr_comment.yml
